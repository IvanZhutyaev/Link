#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024
"""

import sys
import os
import logging
from datetime import datetime
from sqlalchemy import create_engine, text, inspect
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from environs import Env

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from Database.DB_connection import engine, base
from Models.All_models import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('database_creation.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def get_existing_tables():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü"""
    try:
        inspector = inspect(engine)
        tables = inspector.get_table_names()
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            logger.info(f"   - {table}")
        return tables
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
        return []

def create_all_tables():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üî® –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
        base.metadata.create_all(engine)
        logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def drop_all_tables():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.warning("üóëÔ∏è –£–¥–∞–ª—è—é –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã...")
        base.metadata.drop_all(engine)
        logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def add_missing_columns():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è—é –∏ –¥–æ–±–∞–≤–ª—è—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã...")
    
    columns_to_add = {
        'Properties': [
            ('rating', 'FLOAT DEFAULT 0.0'),
            ('rating_count', 'INTEGER DEFAULT 0'),
            ('has_error', 'BOOLEAN DEFAULT FALSE'),
            ('status', 'VARCHAR DEFAULT \'available\'')
        ],
        'residential_complexes': [
            ('rating', 'FLOAT DEFAULT 0.0'),
            ('rating_count', 'INTEGER DEFAULT 0')
        ],
        'Bookings': [
            ('expires_at', 'DATETIME')
        ],
        'Purchases': [
            ('booking_id', 'INTEGER REFERENCES Bookings(id)')
        ],
        'Mortgages': [
            ('booking_id', 'INTEGER REFERENCES Bookings(id)'),
            ('approved_date', 'DATETIME')
        ]
    }
    
    try:
        with engine.connect() as conn:
            for table_name, columns in columns_to_add.items():
                for column_name, column_definition in columns:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü
                        result = conn.execute(text(f"""
                            SELECT COUNT(*) FROM pragma_table_info('{table_name}') 
                            WHERE name = '{column_name}'
                        """))
                        column_exists = result.scalar() > 0
                        
                        if not column_exists:
                            conn.execute(text(f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_definition}"))
                            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü {column_name} –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}")
                        else:
                            logger.info(f"‚ÑπÔ∏è –°—Ç–æ–ª–±–µ—Ü {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
                            
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü {column_name} –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}: {e}")
            
            conn.commit()
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤: {e}")

def verify_table_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
    
    expected_tables = [
        'Law_faces', 'Users', 'Properties', 'Bookings', 'Purchases', 
        'Mortgages', 'residential_complexes', 'apartment_events', 'developer_ratings'
    ]
    
    try:
        inspector = inspect(engine)
        existing_tables = inspector.get_table_names()
        
        for table in expected_tables:
            if table in existing_tables:
                columns = inspector.get_columns(table)
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å–æ–∑–¥–∞–Ω–∞ —Å {len(columns)} —Å—Ç–æ–ª–±—Ü–∞–º–∏")
                for col in columns:
                    logger.info(f"   - {col['name']}: {col['type']}")
            else:
                logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü: {e}")

def create_indexes():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    logger.info("üìä –°–æ–∑–¥–∞—é –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    indexes = [
        "CREATE INDEX IF NOT EXISTS idx_properties_city ON Properties(city)",
        "CREATE INDEX IF NOT EXISTS idx_properties_price ON Properties(price)",
        "CREATE INDEX IF NOT EXISTS idx_properties_zastroy_id ON Properties(zastroy_id)",
        "CREATE INDEX IF NOT EXISTS idx_bookings_user_id ON Bookings(user_id)",
        "CREATE INDEX IF NOT EXISTS idx_bookings_property_id ON Bookings(property_id)",
        "CREATE INDEX IF NOT EXISTS idx_purchases_user_id ON Purchases(user_id)",
        "CREATE INDEX IF NOT EXISTS idx_mortgages_user_id ON Mortgages(user_id)",
        "CREATE INDEX IF NOT EXISTS idx_apartment_events_apartment_id ON apartment_events(apartment_id)",
        "CREATE INDEX IF NOT EXISTS idx_apartment_events_created_at ON apartment_events(created_at)"
    ]
    
    try:
        with engine.connect() as conn:
            for index_sql in indexes:
                try:
                    conn.execute(text(index_sql))
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: {index_sql.split('ON')[1].strip()}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å: {e}")
            conn.commit()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    logger.info(f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not check_database_connection():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
    existing_tables = get_existing_tables()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ–π—Å—Ç–≤–∏–∏
    if existing_tables:
        print("\n" + "="*60)
        print("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã:")
        for table in existing_tables:
            print(f"  - {table}")
        print("="*60)
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
                      "1. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (—É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ)\n"
                      "2. –°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã\n"
                      "3. –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã\n"
                      "4. –û—Ç–º–µ–Ω–∞\n"
                      "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
        
        if choice == "1":
            if not drop_all_tables():
                return False
            if not create_all_tables():
                return False
        elif choice == "2":
            if not create_all_tables():
                return False
        elif choice == "3":
            add_missing_columns()
        elif choice == "4":
            logger.info("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        else:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return False
    else:
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not create_all_tables():
            return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
    add_missing_columns()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    create_indexes()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    verify_table_structure()
    
    logger.info("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
    logger.info("üìù –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: database_creation.log")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        else:
            print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 