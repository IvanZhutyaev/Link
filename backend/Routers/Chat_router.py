from fastapi import APIRouter, Request
from fastapi.responses import HTMLResponse, FileResponse
from pydantic import BaseModel
import requests
import base64
import json
import os
import tempfile
import glob
import hashlib
from datetime import datetime, timedelta

router = APIRouter()

# –ö—ç—à –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
response_cache = {}
MAX_CACHE_SIZE = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–∞ –∑–∞–ø—Ä–æ—Å–∞
def create_request_hash(system: str, user: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ö–µ—à –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    content = f"{system}:{user}"
    return hashlib.md5(content.encode()).hexdigest()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
def cleanup_cache():
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π"""
    if len(response_cache) > MAX_CACHE_SIZE:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        keys_to_remove = list(response_cache.keys())[:len(response_cache) - MAX_CACHE_SIZE + 10]
        for key in keys_to_remove:
            del response_cache[key]
        print(f"–û—á–∏—â–µ–Ω –∫—ç—à, —É–¥–∞–ª–µ–Ω–æ {len(keys_to_remove)} –∑–∞–ø–∏—Å–µ–π")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
def cleanup_old_audio_files():
    """–£–¥–∞–ª—è–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞"""
    try:
        temp_dir = tempfile.gettempdir()
        audio_pattern = os.path.join(temp_dir, "audio_*.mp3")
        current_time = datetime.now()

        for audio_file in glob.glob(audio_pattern):
            file_time = datetime.fromtimestamp(os.path.getctime(audio_file))
            if current_time - file_time > timedelta(hours=1):
                try:
                    os.remove(audio_file)
                    print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {audio_file}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {audio_file}: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")


# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
def load_real_estate_data():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        current_dir = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(current_dir, "real_estate_data.json")
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data.get('–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏', []))} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤")
            return data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏": []}


# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
real_estate_data = load_real_estate_data()

# –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
cleanup_old_audio_files()

FOLDER_ID = "b1gu5443n2mkggql04p5"
API_KEY = "AQVNxgt6EoH-vteCyRd3S-nsVSw4Y7Vgf3BQ_4XL"

YANDEX_GPT_API = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
YANDEX_TTS_API = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"


class Prompt(BaseModel):
    system: str
    user: str


@router.post("/ask")
def ask_ai(prompt: Prompt):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        request_hash = create_request_hash(prompt.system, prompt.user)
        if request_hash in response_cache:
            print(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞ –¥–ª—è: {prompt.user[:30]}...")
            return response_cache[request_hash]

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        cleanup_old_audio_files()
        cleanup_cache()

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {len(real_estate_data.get('–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏', []))}")
        print(f"–î–∞–Ω–Ω—ã–µ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {real_estate_data}")

        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        extended_system_prompt = f"""
{prompt.system}

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:

{json.dumps(real_estate_data, ensure_ascii=False, indent=2)}

–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏:
1. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
2. –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
3. –ü—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä —É—á–∏—Ç—ã–≤–∞–π: —Ç–∏–ø, –ø–ª–æ—â–∞–¥—å, —Ü–µ–Ω—É, –≥–æ—Ä–æ–¥, –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
5. –£–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò:

üìä –ê–ù–ê–õ–ò–ó –í–´–ì–û–î–´ –ü–û–ö–£–ü–ö–ò:
- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–π —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞
- –°—Ä–∞–≤–Ω–∏–≤–∞–π —Ü–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ
- –û—Ü–µ–Ω–∏–≤–∞–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–æ—Å—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
- –£—á–∏—Ç—ã–≤–∞–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å

üí∞ –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–´–ï –°–û–í–ï–¢–´:
- –û–ø—Ä–µ–¥–µ–ª—è–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É
- –û—Ü–µ–Ω–∏–≤–∞–π —Ä–∏—Å–∫–∏ –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
- –†–µ–∫–æ–º–µ–Ω–¥—É–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –£—á–∏—Ç—ã–≤–∞–π —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã

üìã –ü–û–ú–û–©–¨ –° –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò:
- –û–±—ä—è—Å–Ω—è–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
- –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –æ –ø–æ—Ä—è–¥–∫–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
- –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–π –æ –Ω–∞–ª–æ–≥–∞—Ö –∏ —Å–±–æ—Ä–∞—Ö
- –û–±—ä—è—Å–Ω—è–π –∏–ø–æ—Ç–µ—á–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
- –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º

üè† –ü–û–õ–ù–´–ô –ö–û–ù–°–ê–õ–¢–ò–ù–ì –ü–û –ü–û–ö–£–ü–ö–ï:
- –ü–æ–º–æ–≥–∞–π —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–π–æ–Ω–∞
- –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä
- –û–±—ä—è—Å–Ω—è–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
- –†–µ–∫–æ–º–µ–Ω–¥—É–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
- –ü–æ–º–æ–≥–∞–π —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±—é–¥–∂–µ—Ç–∞

–í—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!
"""

        # –®–∞–≥ 1 ‚Äî –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT
        gpt_payload = {
            "modelUri": f"gpt://{FOLDER_ID}/yandexgpt/latest",
            "completionOptions": {
                "stream": False,
                "temperature": 0.5,
                "maxTokens": 2000
            },
            "messages": [
                {"role": "system", "text": extended_system_prompt},
                {"role": "user", "text": prompt.user}
            ]
        }
        gpt_headers = {
            "Authorization": f"Api-Key {API_KEY}",
            "Content-Type": "application/json"
        }

        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ YandexGPT: {prompt.user[:50]}...")
        gpt_response = requests.post(YANDEX_GPT_API, json=gpt_payload, headers=gpt_headers, timeout=60)
        gpt_response.raise_for_status()
        gpt_data = gpt_response.json()
        reply = gpt_data["result"]["alternatives"][0]["message"]["text"]
        print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT: {reply[:50]}...")

        # –®–∞–≥ 2 ‚Äî –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å —á–µ—Ä–µ–∑ SpeechKit
        tts_headers = {
            "Authorization": f"Api-Key {API_KEY}"
        }
        tts_data = {
            "text": reply,
            "lang": "ru-RU",
            "voice": "alena",
            "folderId": FOLDER_ID,
            "format": "mp3"
        }

        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ SpeechKit...")
        tts_response = requests.post(YANDEX_TTS_API, data=tts_data, headers=tts_headers, timeout=60)
        tts_response.raise_for_status()
        print("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç SpeechKit")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_dir = tempfile.gettempdir()
        audio_id = str(hash(reply) % 1000000)
        audio_filename = f"audio_{audio_id}.mp3"
        audio_path = os.path.join(temp_dir, audio_filename)

        with open(audio_path, "wb") as f:
            f.write(tts_response.content)

        tts_base64 = base64.b64encode(tts_response.content).decode("utf-8")

        response_cache[request_hash] = {
            "answer": reply,
            "audio": tts_base64,
            "audioFormat": "mp3",
            "audioUrl": f"/audio/{audio_id}"
        }
        return response_cache[request_hash]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ ask_ai: {e}")
        return {"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}


@router.get("/stats")
def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    total_builders = len(real_estate_data["–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏"])
    total_complexes = sum(len(builder["–∂–∫"]) for builder in real_estate_data["–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏"])
    total_apartments = 0
    cities = set()

    for builder in real_estate_data["–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏"]:
        for complex in builder["–∂–∫"]:
            cities.add(complex["–≥–æ—Ä–æ–¥"])
            total_apartments += len(complex["–∫–≤–∞—Ä—Ç–∏—Ä—ã"])

    return {
        "–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤": total_builders,
        "–∂–∏–ª—ã—Ö_–∫–æ–º–ø–ª–µ–∫—Å–æ–≤": total_complexes,
        "–∫–≤–∞—Ä—Ç–∏—Ä": total_apartments,
        "–≥–æ—Ä–æ–¥–æ–≤": len(cities),
        "—Å–ø–∏—Å–æ–∫_–≥–æ—Ä–æ–¥–æ–≤": list(cities)
    }


@router.get("/analysis/{complex_id}")
def analyze_investment(complex_id: int):
    """–ê–Ω–∞–ª–∏–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ñ–ö"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ñ–ö –ø–æ ID
        for builder in real_estate_data["–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏"]:
            for complex in builder["–∂–∫"]:
                if complex.get("id") == complex_id:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    apartments = complex["–∫–≤–∞—Ä—Ç–∏—Ä—ã"]
                    avg_price = sum(apt["—Ü–µ–Ω–∞"] for apt in apartments) / len(apartments)
                    avg_area = sum(apt["–ø–ª–æ—â–∞–¥—å"] for apt in apartments) / len(apartments)
                    price_per_sqm = avg_price / avg_area

                    return {
                        "–∂–∫": complex["–Ω–∞–∑–≤–∞–Ω–∏–µ"],
                        "–≥–æ—Ä–æ–¥": complex["–≥–æ—Ä–æ–¥"],
                        "–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫": builder["–Ω–∞–∑–≤–∞–Ω–∏–µ"],
                        "–∞–Ω–∞–ª–∏–∑": {
                            "—Å—Ä–µ–¥–Ω—è—è_—Ü–µ–Ω–∞": round(avg_price, 2),
                            "—Å—Ä–µ–¥–Ω—è—è_–ø–ª–æ—â–∞–¥—å": round(avg_area, 2),
                            "—Ü–µ–Ω–∞_–∑–∞_–∫–≤_–º": round(price_per_sqm, 2),
                            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤": len(apartments),
                            "–¥–∏–∞–ø–∞–∑–æ–Ω_—Ü–µ–Ω": f"{min(apt['—Ü–µ–Ω–∞'] for apt in apartments)} - {max(apt['—Ü–µ–Ω–∞'] for apt in apartments)}"
                        }
                    }
        return {"error": "–ñ–ö –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    except Exception as e:
        return {"error": str(e)}


@router.get("/documents")
def get_documents_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"""
    return {
        "–¥–æ–∫—É–º–µ–Ω—Ç—ã_–¥–ª—è_–ø–æ–∫—É–ø–∫–∏": [
            "–ü–∞—Å–ø–æ—Ä—Ç –†–§",
            "–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ –±—Ä–∞–∫–µ (–µ—Å–ª–∏ –≤ –±—Ä–∞–∫–µ)",
            "–°–æ–≥–ª–∞—Å–∏–µ —Å—É–ø—Ä—É–≥–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É",
            "–°–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö",
            "–°–ø—Ä–∞–≤–∫–∞ –∏–∑ –±–∞–Ω–∫–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—á–µ—Ç–∞",
            "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∏–º–µ—é—â–µ–π—Å—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)"
        ],
        "–¥–æ–∫—É–º–µ–Ω—Ç—ã_–¥–ª—è_–∏–ø–æ—Ç–µ–∫–∏": [
            "–ü–∞—Å–ø–æ—Ä—Ç –†–§",
            "–°–ø—Ä–∞–≤–∫–∞ 2-–ù–î–§–õ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤",
            "–¢—Ä—É–¥–æ–≤–∞—è –∫–Ω–∏–∂–∫–∞",
            "–°–ø—Ä–∞–≤–∫–∞ —Å –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã",
            "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –∑–∞–ª–æ–≥–æ–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ",
            "–°–ø—Ä–∞–≤–∫–∞ –æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏"
        ],
        "–Ω–∞–ª–æ–≥–∏_–∏_—Å–±–æ—Ä—ã": [
            "–ù–î–§–õ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –≤–ª–∞–¥–µ–Ω–∏–µ –º–µ–Ω–µ–µ 5 –ª–µ—Ç)",
            "–ù–∞–ª–æ–≥ –Ω–∞ –∏–º—É—â–µ—Å—Ç–≤–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü",
            "–ì–æ—Å–ø–æ—à–ª–∏–Ω–∞ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∞–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏",
            "–ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
            "–£—Å–ª—É–≥–∏ —Ä–∏—ç–ª—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç—Å—è)"
        ]
    }


@router.get("/investment-tips")
def get_investment_tips():
    """–°–æ–≤–µ—Ç—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"""
    return {
        "–æ–±—â–∏–µ_–ø—Ä–∏–Ω—Ü–∏–ø—ã": [
            "–ò–∑—É—á–∏—Ç–µ —Ä–∞–π–æ–Ω –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É",
            "–û—Ü–µ–Ω–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ü–µ–Ω—ã –∑–∞ –∫–≤.–º –≤ —Ä–∞–π–æ–Ω–µ",
            "–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–∞–π–æ–Ω–∞"
        ],
        "–∫—Ä–∏—Ç–µ—Ä–∏–∏_–≤—ã–±–æ—Ä–∞": [
            "–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
            "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É",
            "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
            "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–≥–∏–æ–Ω–∞"
        ],
        "—Ä–∏—Å–∫–∏": [
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω",
            "–ó–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ",
            "–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–º",
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
            "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏–∑–∏—Å—ã"
        ]
    }


@router.get("/audio/{audio_id}")
def get_audio_file(audio_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª –ø–æ ID"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if not audio_id.isdigit():
            return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ñ–∞–π–ª–∞"}

        # –ò—â–µ–º —Ñ–∞–π–ª –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        temp_dir = tempfile.gettempdir()
        audio_path = os.path.join(temp_dir, f"audio_{audio_id}.mp3")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(audio_path):
            return {"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(audio_path)
        if file_size == 0:
            return {"error": "–§–∞–π–ª –ø—É—Å—Ç–æ–π"}

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
        return FileResponse(
            audio_path,
            media_type="audio/mpeg",
            headers={"Cache-Control": "no-cache"}
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_audio_file: {e}")
        return {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞"}