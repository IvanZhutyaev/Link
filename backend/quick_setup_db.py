#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python quick_setup_db.py
"""

import sys
import os
from sqlalchemy import text

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from Database.DB_connection import engine, base
from Models.All_models import *

def quick_setup():
    """–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        print("üî® –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã...")
        base.metadata.create_all(engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
        print("üîß –î–æ–±–∞–≤–ª—è—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã...")
        with engine.connect() as conn:
            # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è Properties
            try:
                conn.execute(text("ALTER TABLE Properties ADD COLUMN rating FLOAT DEFAULT 0.0"))
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü rating –≤ Properties")
            except:
                pass
                
            try:
                conn.execute(text("ALTER TABLE Properties ADD COLUMN rating_count INTEGER DEFAULT 0"))
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü rating_count –≤ Properties")
            except:
                pass
                
            try:
                conn.execute(text("ALTER TABLE Properties ADD COLUMN has_error BOOLEAN DEFAULT FALSE"))
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü has_error –≤ Properties")
            except:
                pass
                
            try:
                conn.execute(text("ALTER TABLE Properties ADD COLUMN status VARCHAR DEFAULT 'available'"))
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü status –≤ Properties")
            except:
                pass
            
            # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è residential_complexes
            try:
                conn.execute(text("ALTER TABLE residential_complexes ADD COLUMN rating FLOAT DEFAULT 0.0"))
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü rating –≤ residential_complexes")
            except:
                pass
                
            try:
                conn.execute(text("ALTER TABLE residential_complexes ADD COLUMN rating_count INTEGER DEFAULT 0"))
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü rating_count –≤ residential_complexes")
            except:
                pass
            
            # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è Bookings
            try:
                conn.execute(text("ALTER TABLE Bookings ADD COLUMN expires_at DATETIME"))
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü expires_at –≤ Bookings")
            except:
                pass
            
            # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è Purchases
            try:
                conn.execute(text("ALTER TABLE Purchases ADD COLUMN booking_id INTEGER REFERENCES Bookings(id)"))
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü booking_id –≤ Purchases")
            except:
                pass
            
            # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è Mortgages
            try:
                conn.execute(text("ALTER TABLE Mortgages ADD COLUMN booking_id INTEGER REFERENCES Bookings(id)"))
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü booking_id –≤ Mortgages")
            except:
                pass
                
            try:
                conn.execute(text("ALTER TABLE Mortgages ADD COLUMN approved_date DATETIME"))
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü approved_date –≤ Mortgages")
            except:
                pass
            
            conn.commit()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        print("üìä –°–æ–∑–¥–∞—é –∏–Ω–¥–µ–∫—Å—ã...")
        with engine.connect() as conn:
            indexes = [
                "CREATE INDEX IF NOT EXISTS idx_properties_city ON Properties(city)",
                "CREATE INDEX IF NOT EXISTS idx_properties_price ON Properties(price)",
                "CREATE INDEX IF NOT EXISTS idx_properties_zastroy_id ON Properties(zastroy_id)",
                "CREATE INDEX IF NOT EXISTS idx_bookings_user_id ON Bookings(user_id)",
                "CREATE INDEX IF NOT EXISTS idx_bookings_property_id ON Bookings(property_id)",
                "CREATE INDEX IF NOT EXISTS idx_purchases_user_id ON Purchases(user_id)",
                "CREATE INDEX IF NOT EXISTS idx_mortgages_user_id ON Mortgages(user_id)",
                "CREATE INDEX IF NOT EXISTS idx_apartment_events_apartment_id ON apartment_events(apartment_id)",
                "CREATE INDEX IF NOT EXISTS idx_apartment_events_created_at ON apartment_events(created_at)"
            ]
            
            for index_sql in indexes:
                try:
                    conn.execute(text(index_sql))
                except:
                    pass
            
            conn.commit()
        
        print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = quick_setup()
    if not success:
        sys.exit(1) 